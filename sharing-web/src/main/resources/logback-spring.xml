<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <include resource="org/springframework/boot/logging/logback/base.xml" />
    <logger name="org.springframework.web" level="INFO"/>
    <logger name="org.springboot.sample" level="TRACE" />
    <!--
        %p:输出优先级，即DEBUG,INFO,WARN,ERROR,FATAL
        %r:输出自应用启动到输出该日志讯息所耗费的毫秒数
        %t:输出产生该日志事件的线程名
        %f:输出日志讯息所属的类别的类别名
        %c:输出日志讯息所属的类的全名
        %d:输出日志时间点的日期或时间，指定格式的方式： %d{yyyy-MM-dd HH:mm:ss}
        %l:输出日志事件的发生位置，即输出日志讯息的语句在他所在类别的第几行。
        %m:输出代码中指定的讯息，如log(message)中的message
        %n:输出一个换行符号
    -->

    <!-- 开发环境 -->
    <springProfile name="dev">
        <logger name="org.springframework.web" level="INFO"/>
        <logger name="org.springboot.sample" level="INFO" />
        <logger name="com.sharing" level="INFO" />


    </springProfile>
    <!-- 生产、测试环境 -->
    <springProfile name="prod,test">

        <property name="outPattern" value="%p|%d{yyyy-MM-dd|HH:mm:ss.SSS}|%t|%c|%C:%L|-|%m|%n"/>
        <property name="dynamic.log.path" value="/sharing/logs"/>
        <!-- 文件历史数 -->
        <property name="maxHistory" value="30"/>
    <!--appender:设置日志信息的去向.常用的有下面几个:
            ch.qos.logback.core.ConsoleAppender (控制台)
            ch.qos.logback.core.rolling.RollingFileAppender (文件大小到达指定尺寸的时候产生一个新文件)
            ch.qos.logback.core.FileAppender (文件)
    -->
        <appender name="SELFFILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <!--被写入的文件名,可以使相对路径,也可以是绝对路径,上级不存在自动创建-->
            <file>${dynamic.log.path}/selfsharingAdmin.log</file>
            <!-- 按天来回滚，如果需要按小时来回滚，则设置为{yyyy-MM-dd_HH} -->
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${dynamic.log.path}/selfsharingAdmin%d{yyyy-MM-dd}.log</fileNamePattern>
                <!-- 如果按天来回滚，则最大保存时间为maxHistory天，maxHistory天之前的都将被清理掉 -->
                <maxHistory>${maxHistory}</maxHistory>
            </rollingPolicy>
            <!-- 日志输出格式 -->
            <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
                <Pattern>%d{yyyy-MM-dd|HH:mm:ss.SSS}|%thread|%-5level|%logger{36}-|%msg%n</Pattern>
            </encoder>
        </appender>

        <!-- logback -->
        <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
            <filter class="com.sharing.filter.LogFilter"/>
            <encoder>
                <pattern>${outPattern}</pattern>
            </encoder>
        </appender>
        <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
            <withJansi>true</withJansi>
            <encoder>
                <pattern>[%thread] %highlight(%-5level) %cyan(%logger{15}) - %highlight(%msg) %n</pattern>
            </encoder>
        </appender>
        <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
           <!---->
            <file>${dynamic.log.path}/sharingAdmin.log</file>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <!-- 必要节点，包含文件名及"%d"转换符，"%d"可以包含一个java.text.SimpleDateFormat指定的时间格式，默认格式是 yyyy-MM-dd ,按天来回滚，如果需要按小时来回滚，则设置为{yyyy-MM-dd_HH} -->
                <fileNamePattern>${dynamic.log.path}/sharingAdmin%d{yyyy-MM-dd}.log</fileNamePattern>
                <!-- 如果按天来回滚，则最大保存时间为maxHistory天，maxHistory天之前的都将被清理掉 -->
                <maxHistory>${maxHistory}</maxHistory>
            </rollingPolicy>
            <!-- 日志输出格式 -->
            <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
                <Pattern>%d{yyyy-MM-dd|HH:mm:ss.SSS}|%thread|%-5level|%logger{36}-|%msg%n</Pattern>
            </encoder>
        </appender>
        <!--  异步输出，异步的log片段必须在同步段后面，否则不起作用  -->
        <appender name="ASYNC_FILE" class="ch.qos.logback.classic.AsyncAppender">
            <filter class="com.sharing.filter.LogFilter"/>
            <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
            <discardingThreshold>0</discardingThreshold>
            <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
            <queueSize>256</queueSize>
            <!-- 添加附加的appender,最多只能添加一个 -->
            <appender-ref ref="FILE"/>
        </appender>
        <appender name="logback_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <file>${dynamic.log.path}/WareDetailController.log</file>
            <!-- 按天来回滚，如果需要按小时来回滚，则设置为{yyyy-MM-dd_HH} -->
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${dynamic.log.path}/logback%d{yyyy-MM-dd}.log</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
            </rollingPolicy>
            <!-- 日志输出格式 -->
            <layout class="ch.qos.logback.classic.PatternLayout">
                <Pattern>%d{yyyy-MM-dd|HH:mm:ss.SSS}|%thread|%-5level|%logger{36}-|%msg%n</Pattern>
            </layout>
        </appender>
        <!-- 异步输出 -->
        <appender name="ASYNC_logback" class="ch.qos.logback.classic.AsyncAppender">
            <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
            <discardingThreshold>0</discardingThreshold>
            <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
            <queueSize>256</queueSize>
            <!-- 添加附加的appender -->
            <appender-ref ref="logback_FILE"/>
        </appender>
    <!--
  也是<logger>元素，但是它是根logger。默认debug
  level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
  <root>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger。
-->
        <root level="INFO">
            <appender-ref ref="STDOUT" />
            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="ASYNC_FILE"/>
        </root>
    <!--
    用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。
    <loger>仅有一个name属性，一个可选的level和一个可选的addtivity属性
    name:
        用来指定受此logger约束的某一个包或者具体的某一个类。
    level:
        用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
        如果未设置此属性，那么当前logger将会继承上级的级别。
    additivity:
        是否向上级loger传递打印信息。默认是true。
    <logger>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger
-->
        <logger name="com.sharing.common.utils.HttpClientUtils">
            <level value="DEBUG"/>
            <appender-ref ref="SELFFILE" />
        </logger>

<!--        <logger name="com.sharing.service.ActivityInfoService">-->
<!--            <level value="DEBUG"/>-->
<!--            <appender-ref ref="SELFFILE" />-->
<!--        </logger>-->
    </springProfile>



</configuration>
<!--日志分析总结
配置啥都不说了，上边都有的，注解很详细。
注意在本项目的日志管理，统一在controller层做了注解，然后弄了一个aop的切面方法增强，可以拦截各种请求
，如果有错的就会打印日志信息，并且将日志保存在我们在log—spring.xml配置文件中的指定路径下，
值得注意的是我们自己又单独配置了三个自己的log打印格式，不是统一拦截的，如果是这三个路径下的报错，不会走默认的日志配置的
我们首先配置一个 LogFilter extends Filter<ILoggingEvent> 我们在这里面拦截了三个logName后直接舍弃，不走接下来的filter，
这三个路径下的日志输出格式已经在三个文件定义好了
然后我们在配置文件中自定义这三个文件的日志输出的路径以及日志保存时间。这三个日志不会打印到控制台。
-->